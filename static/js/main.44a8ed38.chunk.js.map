{"version":3,"sources":["images/Group.svg","images/Completed.svg","images/Incomplete.svg","images/Locked.svg","payload.js","components/tasks/task_group_index_item.jsx","components/tasks/task_groups.jsx","components/tasks/task_index_item.jsx","components/tasks/selected_group.jsx","components/tasks/tasks.jsx","components/root.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","payload","id","group","task","dependencyIds","completedAt","taskGroupIndexItem","_ref","name","handleClick","numTasks","Object","keys","length","react_default","a","createElement","className","onClick","src","groupSVG","counter","forEach","numCompletedTasks","taskGroups","groups","map","task_group_index_item","key","taskIndexItem","allTasks","status","every","depId","find","indexItemClasses","classNames","index-item","no-hover","e","locked","completed","incomplete","style","nameBuilder","selectedGroup","resetSelected","task_index_item","Tasks","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tasks","selected","handleGroupClick","bind","assertThisInitialized","handleTaskClick","groupMaker","setState","push","preventDefault","groupName","currentTarget","lastElementChild","firstElementChild","innerText","taskId","_this2","now","Date","newTasks","slice","currTask","statusChange","dependencyChecker","_this3","content","selected_group","task_groups","React","Component","Root","react_router","path","component","App","react_router_dom","components_root","Boolean","window","location","hostname","match","document","addEventListener","root","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44a8ed38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Group.eec740fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/Completed.4230b7aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/Incomplete.274a394e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Locked.fdd50017.svg\";","const payload = [\n    {\n        id: 1,\n        group: \"Purchases\",\n        task: \"Go to the bank\",\n        dependencyIds: [],\n        completedAt: null,\n    },\n    {\n        id: 2,\n        group: \"Purchases\",\n        task: \"Buy hammer\",\n        dependencyIds: [1],\n        completedAt: null,\n    },\n    {\n        id: 3,\n        group: \"Purchases\",\n        task: \"Buy wood\",\n        dependencyIds: [1],\n        completedAt: null,\n    },\n    {\n        id: 4,\n        group: \"Purchases\",\n        task: \"Buy nails\",\n        dependencyIds: [1],\n        completedAt: null,\n    },\n    {\n        id: 5,\n        group: \"Purchases\",\n        task: \"Buy paint\",\n        dependencyIds: [1],\n        completedAt: null,\n    },\n    {\n        id: 6,\n        group: \"Build Airplane\",\n        task: \"Hammer nails into wood\",\n        dependencyIds: [2, 3, 4],\n        completedAt: null,\n    },\n    {\n        id: 7,\n        group: \"Build Airplane\",\n        task: \"Paint wings\",\n        dependencyIds: [5, 6],\n        completedAt: null,\n    },\n    {\n        id: 8,\n        group: \"Build Airplane\",\n        task: \"Have a snack\",\n        dependencyIds: [],\n        completedAt: null,\n    }\n];\n\nexport default payload;","import React from 'react';\nimport groupSVG from '../../images/Group.svg';\n\nconst taskGroupIndexItem = ({group, name, handleClick}) => {\n    const numTasks = Object.keys(group).length;\n\n    const numCompletedTasks = () => {\n        let counter = 0;\n        group.forEach(task => {\n            if (task.completedAt){counter++;}\n        })\n        return counter;\n    }\n    return(\n        <div className=\"index-item\" onClick={handleClick}>\n            <div className=\"svg-container\">\n                <img className=\"group\" src={groupSVG}/>\n            </div>\n            <div className=\"index-item-info\">\n                <div className=\"name\">\n                    {name}\n                </div>\n                <div className=\"completed\">\n                    {numCompletedTasks()} OF {numTasks} TASKS COMPLETE\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default taskGroupIndexItem;","import React from 'react';\nimport TaskGroupIndexItem from './task_group_index_item';\n\nconst taskGroups = ({groups, handleClick}) => {\n    return(\n        <div className=\"index-container\">\n            <div className=\"header\">\n                <h1>Things To Do</h1>\n            </div>\n            {Object.keys(groups).map(name => {\n                return (<TaskGroupIndexItem key={name} handleClick={handleClick} name={name} group={groups[name]}/>)\n            })}\n        </div>\n    )\n}\n\nexport default taskGroups;","import React from 'react';\nimport completed from '../../images/Completed.svg';\nimport incomplete from '../../images/Incomplete.svg';\nimport locked from '../../images/Locked.svg';\nimport classNames from 'classnames';\n\nconst taskIndexItem = ({allTasks, task, handleClick}) => {\n    \n    const lockedStatus = () => {\n        let unlocked = task.dependencyIds.every(depId => {\n            let dep = allTasks.find(task => task.id === depId);\n            return dep.completedAt ? true : false;\n        });\n        let stat = null;\n        if (!unlocked) {\n            stat = \"locked\"\n        } else {\n            stat = task.completedAt ? \"completed\" : \"incomplete\"\n        }\n        return stat;\n    }\n\n    let status = lockedStatus();\n    \n    const statusChange = (e) => {\n        if (status === \"locked\") {return;}\n        handleClick(e, task.id)\n    }\n\n    const svgBuilder = () => {\n        if (status === \"locked\") {\n            return (<img className=\"locked\" src={locked} />);\n        } else if (status === \"completed\") {\n            return (<img className=\"unlocked\" src={completed} />);\n        } else {\n            return (<img className=\"unlocked\" src={incomplete} />);\n        }\n    }\n\n    const nameBuilder = () => {\n        let style = \"name\";\n        if (status === \"locked\") {\n            style = \"locked-name\"\n        } else if (status === \"completed\") {\n            style = \"complete-name\"\n        }\n        return (<span className={style}>{task.task}</span>);\n    }\n\n    let indexItemClasses = classNames({\n        \"index-item\": true,\n        \"no-hover\": status === \"locked\"\n    })\n\n    return(\n        <div className={indexItemClasses} onClick={statusChange}>\n            <div className=\"svg-container\">\n                {svgBuilder()}\n            </div>\n            <div className=\"index-item-info\">\n                {nameBuilder()}\n            </div>\n        </div>\n    );\n}\n\nexport default taskIndexItem;","import React from 'react';\nimport TaskIndexItem from './task_index_item';\n\nconst selectedGroup = ({group, name, resetSelected, allTasks, handleClick}) => {\n    return (\n        <div className=\"index-container\">\n            <div className=\"header\">\n                <h1>{name}</h1>\n                <button className=\"all-groups\" onClick={resetSelected}>\n                    All Groups\n                </button>\n            </div>\n            {group.map(task => {\n                return (<TaskIndexItem key={task.id} handleClick={handleClick} allTasks={allTasks} task={task}/>);\n            })}\n\n        </div>\n    )\n}\n\nexport default selectedGroup;","import React from 'react';\nimport tasks from '../../payload';\nimport TaskGroups from './task_groups';\nimport SelectedGroup from './selected_group';\n\nclass Tasks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: null,\n            groups: null,\n            selected: null\n        };\n        this.handleGroupClick = this.handleGroupClick.bind(this);\n        this.resetSelected = this.resetSelected.bind(this);\n        this.handleTaskClick = this.handleTaskClick.bind(this);\n    }\n\n    componentDidMount() {\n        let groups = this.groupMaker(tasks)\n        this.setState({tasks, groups});\n    }\n\n    groupMaker(tasks) {\n        let groups = {};\n        tasks.forEach(task => {\n            if (groups[task.group]) {\n                groups[task.group].push(task);\n            } else {\n                groups[task.group] = [task];\n            }\n        })\n        return groups;\n    }\n\n    handleGroupClick(e) {\n        e.preventDefault()\n        let groupName = e.currentTarget.lastElementChild.firstElementChild.innerText;\n        this.setState({selected: groupName});\n    }\n\n    handleTaskClick(e, taskId) {\n        e.preventDefault();\n        let task = this.state.tasks.find(task => taskId === task.id)\n        let now = new Date();\n        let newTasks = this.state.tasks.slice();\n        task.completedAt = task.completedAt ? null : now;\n        newTasks.forEach(currTask => {\n            let statusChange = this.dependencyChecker(currTask)\n            if (currTask.id === task.id) {\n                currTask = task\n            } else if (!statusChange) {\n                currTask.completedAt = null;\n            }\n        });\n        this.setState({tasks: newTasks});\n    }\n\n    dependencyChecker(currTask) {\n        let depIds = currTask.dependencyIds;\n        return depIds.every(depId => {\n            let dep = this.state.tasks.find(task => task.id === depId);\n            return dep.completedAt ? true : false;\n        })\n    }\n\n    resetSelected(e) {\n        e.preventDefault();\n        let groups = this.groupMaker(this.state.tasks);\n        this.setState({selected: null, groups});\n    }\n\n    render() {\n        if (!this.state.groups) {\n            return null;\n        }\n        const content = this.state.selected ? \n            <SelectedGroup \n                handleClick={this.handleTaskClick}\n                resetSelected={this.resetSelected}\n                allTasks={this.state.tasks}\n                name={this.state.selected} \n                group={this.state.groups[this.state.selected]} /> :\n            <TaskGroups \n                handleClick={this.handleGroupClick} \n                groups={this.state.groups} />\n        return (\n            <div className=\"content\">\n                {content}\n            </div>\n        );\n    }\n}\n\nexport default Tasks;","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport Tasks from './tasks/tasks';\n\nconst Root = () => (\n    <div className=\"main-content\">\n        <Switch>\n            <Route path=\"/\" component={Tasks}/>\n        </Switch>\n    </div>\n)\n\nexport default Root;","import React from 'react';\nimport {HashRouter} from 'react-router-dom';\nimport Root from './components/root';\n\nconst App = () => (\n  <HashRouter>\n    <Root />\n  </HashRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const root = document.getElementById(\"root\");\n    ReactDOM.render(<App />, root);\n});\n\nserviceWorker.unregister();\n"],"sourceRoot":""}